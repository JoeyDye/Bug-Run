"use strict";!function(){var e={},t=[];function n(n){if(e[n])return e[n];var s=new Image;s.onload=function(){e[n]=s,a()&&t.forEach(function(e){e()})},e[n]=!1,s.src=n}function a(){var t=!0;for(var n in e)e.hasOwnProperty(n)&&!e[n]&&(t=!1);return t}window.Resources={load:function(e){e instanceof Array?e.forEach(function(e){n(e)}):n(e)},get:function(t){return e[t]},onReady:function(e){t.push(e)},isReady:a}}();var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}$("#startModal").modal({backdrop:"static",keyboard:!1}),$("#startModal").modal("show");var Enemy=function(){function e(t,n){_classCallCheck(this,e),this.x=t,this.y=n,this.speed=Math.floor(5*Math.random()+10),this.sprite="images/enemy-bug.png"}return _createClass(e,[{key:"update",value:function(e){this.speed}},{key:"render",value:function(){ctx.drawImage(Resources.get(this.sprite),this.x,this.y)}},{key:"checkCollisions",value:function(){this.x>player.x-65&&this.x<player.x+80&&this.y>=player.y-70&&this.y<player.y+65&&player.resetPlayer()}},{key:"reset",value:function(){this.x>515&&(this.x=-200)}},{key:"moveEnemy",value:function(e){var t=setInterval(function(){!0===player.winGame&&clearInterval(t),e.checkCollisions(),e.update(),e.reset(),e.x+=e.speed},75)}}]),e}(),Player=function(){function e(){_classCallCheck(this,e),this.x=200,this.y=380,this.speed=30,this.sprite,this.winGame=!1}return _createClass(e,[{key:"update",value:function(e){this.speed}},{key:"render",value:function(){ctx.drawImage(Resources.get(this.sprite),this.x,this.y)}},{key:"resetPlayer",value:function(){this.x=200,this.y=380}},{key:"win",value:function(){var e=this;this.winGame=!0;var t=document.querySelector(".win-text");t.innerHTML="You Win!!!",star.y=-200,setTimeout(function(){e.resetPlayer(),startEnemies(),t.innerHTML="",star.y=-5,e.winGame=!1},3e3)}},{key:"handleInput",value:function(e){if(!0!==player.winGame)switch(this.x>star.x-70&&this.x<star.x+60&&this.y>=star.y-50&&this.y<star.y+50&&this.win(),this.update(),e){case"up":this.y>-5&&(this.y-=this.speed);break;case"down":this.y<canvas.height-175&&(this.y+=this.speed);break;case"right":this.x<canvas.width-100&&(this.x+=this.speed);break;case"left":this.x>-10&&(this.x-=this.speed)}}}]),e}(),Star=function(){function e(){_classCallCheck(this,e),this.x=205,this.y=-5,this.sprite="images/star.png"}return _createClass(e,[{key:"render",value:function(){ctx.drawImage(Resources.get(this.sprite),this.x,this.y)}}]),e}(),selectGirl=document.querySelector("#girl"),selectBoy=document.querySelector("#boy"),setPlayerGirl=function(){player.sprite="images/char-cat-girl.png",$("#startModal").modal("hide"),Engine(window)},setPlayerBoy=function(){player.sprite="images/char-boy.png",$("#startModal").modal("hide"),Engine(window)};selectGirl.addEventListener("click",setPlayerGirl),selectBoy.addEventListener("click",setPlayerBoy);var player=new Player,star=new Star,enemy1=new Enemy(-10,60),enemy2=new Enemy(-10,140),enemy3=new Enemy(-10,220),enemy4=new Enemy(-500,60),enemy5=new Enemy(-500,140),enemy6=new Enemy(-500,220),allEnemies=[enemy1,enemy2,enemy3,enemy4,enemy5,enemy6],startEnemies=function(){var e=!0,t=!1,n=void 0;try{for(var a,s=allEnemies[Symbol.iterator]();!(e=(a=s.next()).done);e=!0){var i=a.value;i.moveEnemy(i)}}catch(e){t=!0,n=e}finally{try{!e&&s.return&&s.return()}finally{if(t)throw n}}};startEnemies(),document.addEventListener("keyup",function(e){player.handleInput({37:"left",38:"up",39:"right",40:"down"}[e.keyCode])});var Engine=function(e){var t,n=e.document,a=e.window,s=n.createElement("canvas"),i=s.getContext("2d");function r(){var e,n=Date.now();e=(n-t)/1e3,allEnemies.forEach(function(t){t.update(e)}),player.update(),function(){var e,t,n=["images/water-block.png","images/stone-block.png","images/stone-block.png","images/stone-block.png","images/grass-block.png","images/grass-block.png"];for(i.clearRect(0,0,s.width,s.height),e=0;e<6;e++)for(t=0;t<5;t++)i.drawImage(Resources.get(n[e]),101*t,83*e);allEnemies.forEach(function(e){e.render()}),player.render(),star.render()}(),t=n,a.requestAnimationFrame(r)}s.width=505,s.height=606,n.body.appendChild(s),Resources.load(["images/stone-block.png","images/water-block.png","images/grass-block.png","images/enemy-bug.png","images/char-boy.png","images/char-cat-girl.png","images/star.png"]),Resources.onReady(function(){t=Date.now(),r()}),e.ctx=i,e.canvas=s};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
