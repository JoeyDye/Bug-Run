"use strict";var _createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(n,t,a){return t&&e(n.prototype,t),a&&e(n,a),n}}();function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}$("#myModal").modal("show");var Enemy=function(){function e(n,t){_classCallCheck(this,e),this.x=n,this.y=t,this.speed=Math.floor(5*Math.random()+10),this.sprite="images/enemy-bug.png"}return _createClass(e,[{key:"update",value:function(e){this.speed}},{key:"render",value:function(){ctx.drawImage(Resources.get(this.sprite),this.x,this.y)}},{key:"checkCollisions",value:function(){this.x>player.x-65&&this.x<player.x+80&&this.y>=player.y-70&&this.y<player.y+65&&player.resetPlayer()}},{key:"reset",value:function(){this.x>515&&(this.x=-200)}},{key:"moveEnemy",value:function(e){var n=setInterval(function(){!0===player.winGame&&clearInterval(n),e.checkCollisions(),e.update(),e.reset(),e.x+=e.speed},75)}}]),e}(),Player=function(){function e(){_classCallCheck(this,e),this.x=200,this.y=380,this.speed=30,this.sprite,this.winGame=!1}return _createClass(e,[{key:"update",value:function(e){this.speed}},{key:"render",value:function(){ctx.drawImage(Resources.get(this.sprite),this.x,this.y)}},{key:"resetPlayer",value:function(){this.x=200,this.y=420}},{key:"win",value:function(){var e=this;this.winGame=!0;var n=document.querySelector(".win-message");n.innerHTML="You Win!!!",star.y=-200,setTimeout(function(){e.resetPlayer(),startEnemies(),n.innerHTML="",star.y=-5,e.winGame=!1},3e3)}},{key:"handleInput",value:function(e){if(!0!==player.winGame)switch(this.x>star.x-70&&this.x<star.x+60&&this.y>=star.y-50&&this.y<star.y+50&&this.win(),this.update(),e){case"up":this.y>-10&&(this.y-=this.speed);break;case"down":this.y<canvas.height-170&&(this.y+=this.speed);break;case"right":this.x<canvas.width-100&&(this.x+=this.speed);break;case"left":this.x>-10&&(this.x-=this.speed)}}}]),e}(),Star=function(){function e(){_classCallCheck(this,e),this.x=205,this.y=-5,this.sprite="images/star.png"}return _createClass(e,[{key:"render",value:function(){ctx.drawImage(Resources.get(this.sprite),this.x,this.y)}}]),e}(),selectGirl=document.querySelector("#girl"),selectBoy=document.querySelector("#boy"),sprite=void 0,setPlayerGirl=function(e){player.sprite="images/char-cat-girl.png",$("#myModal").modal("hide"),Engine(void 0)},setPlayerBoy=function(e){player.sprite="images/char-boy.png",$("#myModal").modal("hide"),Engine(void 0)};selectGirl.addEventListener("click",setPlayerGirl),selectBoy.addEventListener("click",setPlayerBoy);var player=new Player,star=new Star,enemy1=new Enemy(-10,60),enemy2=new Enemy(-10,140),enemy3=new Enemy(-10,220),enemy4=new Enemy(-500,60),enemy5=new Enemy(-500,140),enemy6=new Enemy(-500,220),allEnemies=[enemy1,enemy2,enemy3,enemy4,enemy5,enemy6],startEnemies=function(){var e=!0,n=!1,t=void 0;try{for(var a,i=allEnemies[Symbol.iterator]();!(e=(a=i.next()).done);e=!0)enemy=a.value,enemy.moveEnemy(enemy)}catch(e){n=!0,t=e}finally{try{!e&&i.return&&i.return()}finally{if(n)throw t}}};startEnemies(),document.addEventListener("keyup",function(e){player.handleInput({37:"left",38:"up",39:"right",40:"down"}[e.keyCode])});var Engine=function(e){var n,t=e.document,a=e.window,i=t.createElement("canvas"),s=i.getContext("2d");function r(){var e,t=Date.now();e=(t-n)/1e3,allEnemies.forEach(function(n){n.update(e)}),player.update(),function(){var e,n,t=["images/water-block.png","images/stone-block.png","images/stone-block.png","images/stone-block.png","images/grass-block.png","images/grass-block.png"];for(s.clearRect(0,0,i.width,i.height),e=0;e<6;e++)for(n=0;n<5;n++)s.drawImage(Resources.get(t[e]),101*n,83*e);allEnemies.forEach(function(e){e.render()}),player.render(),star.render()}(),n=t,a.requestAnimationFrame(r)}i.width=505,i.height=606,t.body.appendChild(i),Resources.load(["images/stone-block.png","images/water-block.png","images/grass-block.png","images/enemy-bug.png","images/char-boy.png","images/char-cat-girl.png","images/star.png"]),Resources.onReady(function(){n=Date.now(),r()}),e.ctx=s,e.canvas=i};!function(){var e={},n=[];function t(t){if(e[t])return e[t];var i=new Image;i.onload=function(){e[t]=i,a()&&n.forEach(function(e){e()})},e[t]=!1,i.src=t}function a(){var n=!0;for(var t in e)e.hasOwnProperty(t)&&!e[t]&&(n=!1);return n}window.Resources={load:function(e){e instanceof Array?e.forEach(function(e){t(e)}):t(e)},get:function(n){return e[n]},onReady:function(e){n.push(e)},isReady:a}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
